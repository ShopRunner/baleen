plugins {
    id 'idea'
    id "org.jetbrains.dokka" version "0.10.1" apply false
    id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.72" apply false
    id 'org.jmailen.kotlinter' version '2.3.2' apply false
}

subprojects {
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven-publish'
    apply plugin: 'kotlin'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'signing'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation(platform("org.junit:junit-bom:5.6.2"))

        implementation("org.jetbrains.kotlin:kotlin-stdlib")
        testImplementation("org.assertj:assertj-core:3.16.1")

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    test {
        useJUnitPlatform()
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka
    }

    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    signing {
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                customizePom(pom)

                from components.java

                artifact sourceJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }
    }
}


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Library for Validating Legacy Data'
            name 'Baleen'
            url 'https://github.com/ShopRunner/baleen'
            organization {
                name 'com.shoprunner'
                url 'https://github.com/ShopRunner'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/ShopRunner/baleen/issues'
            }
            licenses {
                license {
                    name 'BSD 3-Clause "New" or "Revised" License'
                    url 'https://github.com/ShopRunner/baleen/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/ShopRunner/baleen'
                connection 'scm:git:git://github.com/ShopRunner/baleen.git'
                developerConnection 'scm:git:ssh://git@github.com:ShopRunner/baleen.git'
            }
            developers {
                developer {
                    name 'Shoprunner'
                }
            }
        }
    }
}
